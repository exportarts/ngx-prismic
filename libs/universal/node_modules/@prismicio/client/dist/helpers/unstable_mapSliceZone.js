function unstable_mapSliceZone(sliceZone, mappers, context) {
  return Promise.all(sliceZone.map(async (slice, index, slices) => {
    const isRestSliceType = "slice_type" in slice;
    const sliceType = isRestSliceType ? slice.slice_type : slice.type;
    const mapper = mappers[sliceType];
    if (!mapper) {
      return slice;
    }
    const mapperArgs = { slice, slices, index, context };
    let result = await mapper(mapperArgs);
    if (
      // `mapper.length < 1` ensures the given
      // function is something of the form:
      // `() => import(...)`
      mapper.length < 1 && (typeof result === "function" || typeof result === "object" && "default" in result)
    ) {
      result = "default" in result ? result.default : result;
      result = await result(mapperArgs);
    }
    if (isRestSliceType) {
      return {
        __mapped: true,
        id: slice.id,
        slice_type: sliceType,
        ...result
      };
    } else {
      return {
        __mapped: true,
        type: sliceType,
        ...result
      };
    }
  }));
}
export {
  unstable_mapSliceZone
};
//# sourceMappingURL=unstable_mapSliceZone.js.map
