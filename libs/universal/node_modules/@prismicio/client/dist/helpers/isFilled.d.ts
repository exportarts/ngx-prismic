import type { ColorField } from "../types/value/color";
import type { ContentRelationshipField } from "../types/value/contentRelationship";
import type { DateField } from "../types/value/date";
import type { AnyOEmbed } from "../types/value/embed";
import type { GeoPointField } from "../types/value/geoPoint";
import type { GroupField } from "../types/value/group";
import type { ImageField, ImageFieldImage } from "../types/value/image";
import type { IntegrationField } from "../types/value/integration";
import type { KeyTextField } from "../types/value/keyText";
import type { LinkField } from "../types/value/link";
import type { LinkToMediaField } from "../types/value/linkToMedia";
import type { NumberField } from "../types/value/number";
import type { RichTextField } from "../types/value/richText";
import type { SelectField } from "../types/value/select";
import type { SharedSlice } from "../types/value/sharedSlice";
import type { Slice } from "../types/value/slice";
import type { SliceZone } from "../types/value/sliceZone";
import type { TimestampField } from "../types/value/timestamp";
import type { TitleField } from "../types/value/title";
import type { AnyRegularField } from "../types/value/types";
/**
 * Determines if a rich text field is filled.
 *
 * @param field - rich text field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const richText: (field: RichTextField | null | undefined) => field is [import("../types/value/richText").RTNode, ...import("../types/value/richText").RTNode[]];
/**
 * Determines if a title field is filled.
 *
 * @param field - Title field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const title: (field: TitleField | null | undefined) => field is [Omit<import("../types/value/richText").RTHeading1Node | import("../types/value/richText").RTHeading2Node | import("../types/value/richText").RTHeading3Node | import("../types/value/richText").RTHeading4Node | import("../types/value/richText").RTHeading5Node | import("../types/value/richText").RTHeading6Node, "spans"> & {
    spans: [];
}];
/**
 * Determines if an Image thumbnail is filled.
 *
 * @param thumbnail - Image thumbnail to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const imageThumbnail: (thumbnail: ImageFieldImage | null | undefined) => thumbnail is import("../types/value/image").FilledImageFieldImage;
/**
 * Determines if an image field is filled.
 *
 * @param field - Image field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const image: <ThumbnailNames extends string | null = never>(field: import("../types/value/types").Simplify<(import("../types/value/image").EmptyImageFieldImage & Record<Extract<ThumbnailNames, string>, import("../types/value/image").EmptyImageFieldImage>) | (import("../types/value/image").FilledImageFieldImage & Record<Extract<ThumbnailNames, string>, import("../types/value/image").FilledImageFieldImage>)> | null | undefined) => field is import("../types/value/types").Simplify<import("../types/value/image").FilledImageFieldImage & Record<Extract<ThumbnailNames, string>, import("../types/value/image").FilledImageFieldImage>>;
/**
 * Determines if a link field is filled.
 *
 * @param field - Link field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const link: <TypeEnum = string, LangEnum = string, DataInterface extends unknown = unknown>(field: import("../types/value/link").EmptyLinkField<"Any"> | import("../types/value/link").FilledLinkToWebField | import("../types/value/linkToMedia").FilledLinkToMediaField | import("../types/value/contentRelationship").FilledContentRelationshipField<TypeEnum, LangEnum, DataInterface> | null | undefined) => field is import("../types/value/link").FilledLinkToWebField | import("../types/value/linkToMedia").FilledLinkToMediaField | import("../types/value/contentRelationship").FilledContentRelationshipField<TypeEnum, LangEnum, DataInterface>;
/**
 * Determines if a link to media field is filled.
 *
 * @param field - Link to media field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const linkToMedia: (field: LinkToMediaField | null | undefined) => field is import("../types/value/linkToMedia").FilledLinkToMediaField;
/**
 * Determines if a content relationship field is filled.
 *
 * @param field - Content Relationship field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const contentRelationship: <TypeEnum = string, LangEnum = string, DataInterface extends unknown = unknown>(field: import("../types/value/link").EmptyLinkField<"Document"> | import("../types/value/contentRelationship").FilledContentRelationshipField<TypeEnum, LangEnum, DataInterface> | null | undefined) => field is import("../types/value/contentRelationship").FilledContentRelationshipField<TypeEnum, LangEnum, DataInterface>;
/**
 * Determines if a date field is filled.
 *
 * @param field - Date field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const date: (field: DateField | null | undefined) => field is `${number}-${number}-${number}`;
/**
 * Determines if a timestamp field is filled.
 *
 * @param field - Timestamp field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const timestamp: (field: TimestampField | null | undefined) => field is `${number}-${number}-${number}T${number}:${number}:${number}+${number}`;
/**
 * Determines if a color field is filled.
 *
 * @param field - Color field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const color: (field: ColorField | null | undefined) => field is `#${string}`;
/**
 * Determines if a number field is filled.
 *
 * @param field - Number field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const number: (field: NumberField | null | undefined) => field is number;
/**
 * Determines if a key text field is filled.
 *
 * @param field - Key Text field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const keyText: (field: KeyTextField | null | undefined) => field is string;
/**
 * Determines if a select field is filled.
 *
 * @param field - Select field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const select: <Enum extends string>(field: Enum | null | undefined) => field is Enum;
/**
 * Determines if an embed field is filled.
 *
 * @param field - Embed field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const embed: <Field extends import("../types/value/types").EmptyObjectField | (AnyOEmbed & {
    embed_url: string;
    html: string | null;
})>(field: Field | null | undefined) => field is Extract<Field, AnyOEmbed & {
    embed_url: string;
    html: string | null;
}>;
/**
 * Determines if a geopoint field is filled.
 *
 * @param field - GeoPoint field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const geoPoint: (field: GeoPointField | null | undefined) => field is {
    latitude: number;
    longitude: number;
};
/**
 * Determines if an integration field is filled.
 *
 * @param field - Integration field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
export declare const integrationField: <Data extends Record<string, unknown>>(field: Data | null | undefined) => field is Data;
/**
 * @deprecated Renamed to `integrationField`.
 */
export declare const integrationFields: <Data extends Record<string, unknown>>(field: Data | null | undefined) => field is Data;
/**
 * Determines if a Group has at least one item.
 *
 * @param group - Group to check.
 *
 * @returns `true` if `group` contains at least one item, `false` otherwise.
 */
export declare const group: <Fields extends Record<string, AnyRegularField>>(group: [] | [Fields, ...Fields[]] | null | undefined) => group is [Fields, ...Fields[]];
/**
 * Determines if a Slice Zone has at least one Slice.
 *
 * @param slices - Slice Zone to check.
 *
 * @returns `true` if `slices` contains at least one Slice, `false` otherwise.
 */
export declare const sliceZone: <Slices extends Slice<string, Record<string, AnyRegularField>, Record<string, AnyRegularField>> | SharedSlice<string, import("..").SharedSliceVariation<string, Record<string, AnyRegularField>, Record<string, AnyRegularField>>>>(slices: [] | [Slices, ...Slices[]] | null | undefined) => slices is [Slices, ...Slices[]];
